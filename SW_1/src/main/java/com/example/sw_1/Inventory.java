package com.example.sw_1;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

/**
 * This method creates the backbone for storage of the data.
 */
public class Inventory {

    private static ObservableList<Part> allParts = FXCollections.observableArrayList();
    private static ObservableList<Product> allProduct = FXCollections.observableArrayList();

    /**
     * This method adds a new part to the list.
     * this method also allocates an autogenerated id.
     * @param newPart
     */
    public static void addPart(Part newPart){
       newPart.setID(allParts.size()+1);
        allParts.add(newPart);
    }

    /**
     * This method adds a new product to the list
     * this method also allocates an autogenerated id.
     * @param newProduct
     */
    public static void addProduct(Product newProduct){
        newProduct.setId(allProduct.size()+1);
        allProduct.add(newProduct);
    }

    /**
     * This method returns the parts list.
     * @return
     */
    public static ObservableList<Part> getParts(){
        return allParts;
    }

    /**
     * This method returns the Product list.
     * @return
     */
    public static ObservableList<Product> getProduct(){
        return allProduct;
    }

    /**
     * This method will return a specific part based on ID.
     * @param partID
     * @return
     */
    public static Part lookupPart(int partID) {
        if(allParts.isEmpty()){
            return null;
        }
        else{
            for (int i = 0; i < allParts.size(); i++) {
                if (allParts.get(i).getId() == partID) {
                    return allParts.get(i);
                }
            }
        }
        return null;
    }

    /**
     * This method will return a specific part based on Name.
     * @param partName
     * @return
     */
    public static ObservableList lookupPart(String partName){
        ObservableList<Part> result = FXCollections.observableArrayList();
        if (partName.length() == 0){
            result = allParts;
        }
        else {
            for (int i  = 0; i < allParts.size(); i++){
                if(allParts.get(i).getName().toLowerCase().contains(partName.toLowerCase())) {
                    result.add(allParts.get(i));
                }
            }
        }

        return result;
    }

    /**
     * This method will return a specific product based on ID.
     * @param productID
     * @return
     */
    public static Product lookupProduct(int productID){
        for(Product product : allProduct){
            if(productID == product.getId()){
                return product;
            }
        }
        return null;
    }

    /**
     * This method will return a specific product based on Name.
     * @param productName
     * @return
     */
    public static ObservableList lookupProduct(String productName){
        ObservableList<Product> result = FXCollections.observableArrayList();
        if(productName.length() == 0){
            result = allProduct;
        }
        else{
            for(int i = 0; i < allProduct.size(); i++){
                if(allProduct.get(i).getName().toLowerCase().contains(productName.toLowerCase())){
                    result.add(allProduct.get(i));
                }
            }
        }
        return result;
    }

    /**
     * This method will update a part based on information given by user.
     * @param index
     * @param newPart
     */
    public static void updatePart(int index, Part newPart){
        for (int i = 0; i < allParts.size(); i++) {
            if (allParts.get(i).getId() == newPart.getId()) {
                allParts.set(i, newPart);
                break;
            }
        }

    }

    /**
     * This method will update a product based on information given by a user.
     * @param index
     * @param newProduct
     */
    public static void updateProduct(int index, Product newProduct){
        for (int i = 0; i < allProduct.size(); i++) {
            if (allProduct.get(i).getId() == newProduct.getId()) {
                allProduct.set(i, newProduct);
                break;
            }
        }

    }

    /**
     * This method will remove a part from the system.
     * @param selectedPart
     * @return
     */
    public static Boolean deletePart(Part selectedPart){
        return true;
    }

    /**
     * This method will remove a product from the system.
     * @param selectedProduct
     * @return
     */
    public static Boolean deleteProduct (Product selectedProduct){
        return true;
    }

}

